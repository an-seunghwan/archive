# -*- coding: utf-8 -*-
"""langevin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v2Nt4S6of-ApXLRz9gKgMFdPj0VzOjJq
"""
#%%
import numpy as np
import matplotlib.pyplot as plt
#%%
def f(x1, x2):
    return np.exp(-(x1**2 * x2**2 + x1**2 + x2**2 - 8*x1 - 8*x2)/2)

def grad_log_f(x1, x2):
    return [-1/2 * (2 * x1 * x2**2 + 2 * x1 - 8),
            -1/2 * (2 * x2 * x1**2 + 2 * x2 - 8)]
#%%
# langevin monte carlo
np.random.seed(1)
N = 20000
sigma = 0.2
x1 = [1.]
x2 = [-1]
for i in range(1, N):
    z1 = np.random.normal()
    z2 = np.random.normal()

    # gradient
    score_x = grad_log_f(x1[i-1], x2[i-1])

    y1 = x1[i-1] + 1/2 * sigma**2 * score_x[0] + sigma * z1
    y2 = x2[i-1] + 1/2 * sigma**2 * score_x[1] + sigma * z2

    score_y = grad_log_f(y1, y2)

    ratio = 1
    ratio *= f(y1, y2) / f(x1[i-1], x2[i-1])
    ratio *= np.exp(-1/2 * (x1[i-1] - y1 - 1/2 * sigma**2 * score_y[0]) ** 2) * np.exp(-1/2 * (x2[i-1] - y2 - 1/2 * sigma**2 * score_y[1]) ** 2)
    ratio /= np.exp(-1/2 * (y1 - x1[i-1] - 1/2 * sigma**2 * score_x[0]) ** 2) * np.exp(-1/2 * (y2 - x2[i-1] - 1/2 * sigma**2 * score_x[1]) ** 2)

    alpha = min(1, ratio)

    if np.random.uniform() < alpha:
        x1.append(y1)
        x2.append(y2)
    else:
        x1.append(x1[i-1])
        x2.append(x2[i-1])
#%%
plt.figure(figsize=(8, 8))
plt.scatter(x1, x2, alpha=0.1)
plt.title('langevin monte carlo')
#%%
# random walk
np.random.seed(1)
N = 20000
sigma = 0.2
x1 = [1.]
x2 = [-1]
for i in range(1, N):
    z1 = np.random.normal()
    z2 = np.random.normal()

    y1 = x1[i-1] + sigma * z1
    y2 = x2[i-1] + sigma * z2

    ratio = 1
    ratio *= f(y1, y2) / f(x1[i-1], x2[i-1])

    alpha = min(1, ratio)

    if np.random.uniform() < alpha:
        x1.append(y1)
        x2.append(y2)
    else:
        x1.append(x1[i-1])
        x2.append(x2[i-1])
#%%
plt.figure(figsize=(8, 8))
plt.scatter(x1, x2, alpha=0.1)
plt.title('naive monte carlo')
#%%
x1 = np.linspace(-1, 7, 101)
x2 = np.linspace(-1, 7, 101)
x1, x2 = np.meshgrid(x1, x2)
y = f(x1, x2)
#%%
plt.figure(figsize=(8, 8))
plt.contourf(x1, x2, y, 20, cmap=plt.cm.Blues)
plt.title('true density plot')
#%%