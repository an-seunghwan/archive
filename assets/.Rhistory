knitr::opts_chunk$set(echo = TRUE)
# install.packages("sysfonts")
library(sysfonts)
winedf <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"), header=T)
names(winedf) = c("Cvs","Alcohol","Malic acid","Ash","Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
head(winedf)
wineClasses = factor(winedf$Cvs) # class를 나타내는 factor
plot(main="Three Different Cultivars",
winedf$'Alcohol',
winedf$'Alcalinity of ash',
col = wineClasses)
plot(main="Three Different Cultivars",
winedf$`Malic acid`,
winedf$Magnesium,
col = wineClasses)
plot(main="Three Different Cultivars",
winedf$Ash,
winedf$Flavanoids,
col = wineClasses)
winePCA <- prcomp(scale(winedf[,-1]))
summary(winePCA)
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
par(mfrow=c(2,2), family='AppleGothic')
plot(x.pvar,xlab="Principal component", ylab="각 주성분이 설명하는 변동의 비율", ylim=c(0,1), type='b')
plot(cumsum(x.pvar), xlab="Principal component", ylab="각 주성분이 설명하는 변동의 누적 비율", ylim=c(0,1), type='b')
screeplot(x)
screeplot(x, type="l")
par(mfrow=c(1,1))
}
pcaCharts(winePCA)
biplot(winePCA, scale=0, cex=.7)
plot(main="Three Different Cultivars",
winePCA$x[,1:2],
col = wineClasses)
# install.packages("remotes")
# remotes::install_github("TimoMatzen/RBM")
library(RBM)
# 고차원 이진 데이터 MNIST를 불러온다.
data(MNIST)
MNIST$trainX[2, ][1:10]
# visible unit의 수 = 784 + 1 (bias 항)
length(MNIST$trainX[2, ])
# 1개의 훈련 데이터를 시각화
image(matrix(MNIST$trainX[2, ], nrow = 28), col = grey(seq(0, 1, length = 256)))
# 훈련 데이터 저장
train <- MNIST$trainX
# RBM 모형을 적합
# n.hidden: bias 항을 제외한 hidden unit의 개수
modelRBM <- RBM(x = train, n.iter = 1000, n.hidden = 100, size.minibatch = 10)
# 학습된 RBM 모형의 가중치
head(modelRBM$trained.weights)
# visible unit의 수 x hidden unit의 수
dim(modelRBM$trained.weights)
# MNIST 테스트 데이터
test <- matrix(MNIST$testX[6, ], nrow = 1)
# visible unit에 bias 항을 추가
V <- cbind(1, test[1,, drop = FALSE])
# MNIST 테스트 데이터
test <- matrix(MNIST$testX[6, ], nrow = 1)
# visible unit에 bias 항을 추가
V <- cbind(1, test[1,, drop = FALSE])
# sigmoid 함수를 이용해 hidden unit을 계산
# = visible unit이 주어진 경우, hidden unit이 1일 확률값
H <- 1/(1 + exp(-(V %*% modelRBM$trained.weights)))
H[1:10]
length(H)
# sigmoid 함수를 이용해 visible unit을 복원
# = hidden unit이 주어진 경우, visible unit이 1일 확률값
V.rec <- 1/(1 + exp(-(H %*% t(modelRBM$trained.weights)) ))
V.rec[1:10]
length(V.rec)
par(mfrow = c(1,2), family='AppleGothic')
image(matrix(V[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '원래 이미지', font.main = 4)
image(matrix(V.rec[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '복원된 이미지', font.main = 4)
source('~/.active-rstudio-document', echo=TRUE)
unlink('5장 실습_임베딩 수정_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("sysfonts")
library(sysfonts)
winedf <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"), header=T)
names(winedf) = c("Cvs","Alcohol","Malic acid","Ash","Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
head(winedf)
winePCA <- prcomp(scale(winedf[,-1]))
summary(winePCA)
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
par(mfrow=c(2,2), family='AppleGothic')
plot(x.pvar,xlab="Principal component", ylab="각 주성분이 설명하는 변동의 비율", ylim=c(0,1), type='b')
plot(cumsum(x.pvar), xlab="Principal component", ylab="각 주성분이 설명하는 변동의 누적 비율", ylim=c(0,1), type='b')
screeplot(x)
screeplot(x, type="l")
par(mfrow=c(1,1))
}
pcaCharts(winePCA)
biplot(winePCA, scale=0, cex=.7)
plot(main="Three Different Cultivars",
winePCA$x[,1:2],
col = wineClasses)
winePCA <- prcomp(scale(winedf[,-1]))
summary(winePCA)
plot(main="Three Different Cultivars",
winePCA$x[,1:2],
col = factor(winedf$Cvs))
# install.packages("remotes")
# remotes::install_github("TimoMatzen/RBM")
library(RBM)
# 고차원 이진 데이터 MNIST를 불러온다.
data(MNIST)
MNIST$trainX[2, ][1:10]
# visible unit의 수 = 784 + 1 (bias 항)
length(MNIST$trainX[2, ])
# 1개의 훈련 데이터를 시각화
image(matrix(MNIST$trainX[2, ], nrow = 28), col = grey(seq(0, 1, length = 256)))
# install.packages("remotes")
# remotes::install_github("TimoMatzen/RBM")
library(RBM)
# 고차원 이진 데이터 MNIST를 불러온다.
data(MNIST)
# visible unit의 수 = 784 + 1 (bias 항)
length(MNIST$trainX[2, ])
# 1개의 훈련 데이터를 시각화
image(matrix(MNIST$trainX[2, ], nrow = 28), col = grey(seq(0, 1, length = 256)))
# 훈련 데이터 저장
train <- MNIST$trainX
# RBM 모형을 적합
# n.hidden: bias 항을 제외한 hidden unit의 개수
modelRBM <- RBM(x = train, n.iter = 1000, n.hidden = 100, size.minibatch = 10)
# MNIST 테스트 데이터
test <- matrix(MNIST$testX[6, ], nrow = 1)
V <- cbind(1, test[1,, drop = FALSE])
H <- 1/(1 + exp(-(V %*% modelRBM$trained.weights)))
V.rec <- 1/(1 + exp(-(H %*% t(modelRBM$trained.weights)) ))
V.rec
# MNIST 테스트 데이터
test <- matrix(MNIST$testX[6, ], nrow = 1)
V <- cbind(1, test[1,, drop = FALSE])
H <- 1/(1 + exp(-(V %*% modelRBM$trained.weights)))
V.rec <- 1/(1 + exp(-(H %*% t(modelRBM$trained.weights)) ))
par(mfrow = c(1,2), family='AppleGothic')
image(matrix(V[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '원래 이미지', font.main = 4)
image(matrix(V.rec[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '복원된 이미지', font.main = 4)
# MNIST 테스트 데이터
test <- matrix(MNIST$testX[6, ], nrow = 1)
V <- cbind(1, test[1,, drop = FALSE])
H <- 1/(1 + exp(-(V %*% modelRBM$trained.weights)))
V.rec <- 1/(1 + exp(-(H %*% t(modelRBM$trained.weights)) ))
par(mfrow = c(1,2), family='AppleGothic')
image(matrix(V[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '원래 이미지', font.main = 4)
image(matrix(V.rec[, -1], nrow = sqrt(ncol(test))), col = grey(seq(0, 1, length = 256)))
title(main = '복원된 이미지', font.main = 4)
